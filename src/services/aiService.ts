import { PetSpecies } from '../types';
import { vetDatabase } from './database/vetDatabase';
import { detectLanguage, getResponseTemplate, SupportedLanguage } from './languageDetector';
import { analyzeSymptoms } from './vetAdvice/symptomAnalyzer';
import { generateTreatmentRecommendations } from './vetAdvice/treatmentRecommendations';

// Multilingual pet species information
const getPetSpeciesInfo = (species: PetSpecies, _language: SupportedLanguage) => {
  const speciesData = {
    dog: {
      name: { lv: 'suns', ru: '—Å–æ–±–∞–∫–∞', en: 'dog' },
      commonIssues: { 
        lv: ['matu izkri≈°ana', 'gremo≈°anas problƒìmas', 'ƒÅdas kairinƒÅjums', 'ausu infekcijas'],
        ru: ['–≤—ã–ø–∞–¥–µ–Ω–∏–µ —à–µ—Ä—Å—Ç–∏', '–ø—Ä–æ–±–ª–µ–º—ã –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏—è', '—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–∂–∏', '—É—à–Ω—ã–µ –∏–Ω—Ñ–µ–∫—Ü–∏–∏'],
        en: ['hair loss', 'digestive problems', 'skin irritation', 'ear infections']
      },
      avgWeight: { lv: '5-50kg', ru: '5-50–∫–≥', en: '5-50kg' },
      lifespan: { lv: '10-15 gadi', ru: '10-15 –ª–µ—Ç', en: '10-15 years' }
    },
    cat: {
      name: { lv: 'kaƒ∑is', ru: '–∫–æ—à–∫–∞', en: 'cat' },
      commonIssues: { 
        lv: ['urƒ´nceƒºu problƒìmas', 'spalvas izkri≈°ana', 'vem≈°ana', 'zobu problƒìmas'],
        ru: ['–ø—Ä–æ–±–ª–µ–º—ã –º–æ—á–µ–≤—ã–≤–æ–¥—è—â–∏—Ö –ø—É—Ç–µ–π', '–≤—ã–ø–∞–¥–µ–Ω–∏–µ —à–µ—Ä—Å—Ç–∏', '—Ä–≤–æ—Ç–∞', '–ø—Ä–æ–±–ª–µ–º—ã —Å –∑—É–±–∞–º–∏'],
        en: ['urinary problems', 'hair loss', 'vomiting', 'dental problems']
      },
      avgWeight: { lv: '3-7kg', ru: '3-7–∫–≥', en: '3-7kg' },
      lifespan: { lv: '12-18 gadi', ru: '12-18 –ª–µ—Ç', en: '12-18 years' }
    },
    bird: {
      name: { lv: 'putns', ru: '–ø—Ç–∏—Ü–∞', en: 'bird' },
      commonIssues: { 
        lv: ['elpo≈°anas problƒìmas', 'spalvu izkri≈°ana', 'uzvedƒ´bas izmai≈Üas', 'knƒÅbja problƒìmas'],
        ru: ['–ø—Ä–æ–±–ª–µ–º—ã –¥—ã—Ö–∞–Ω–∏—è', '–≤—ã–ø–∞–¥–µ–Ω–∏–µ –ø–µ—Ä—å–µ–≤', '–∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è', '–ø—Ä–æ–±–ª–µ–º—ã —Å –∫–ª—é–≤–æ–º'],
        en: ['breathing problems', 'feather loss', 'behavioral changes', 'beak problems']
      },
      avgWeight: { lv: '0.02-2kg', ru: '0.02-2–∫–≥', en: '0.02-2kg' },
      lifespan: { lv: '5-100 gadi', ru: '5-100 –ª–µ—Ç', en: '5-100 years' }
    },
    rabbit: {
      name: { lv: 'trusis', ru: '–∫—Ä–æ–ª–∏–∫', en: 'rabbit' },
      commonIssues: { 
        lv: ['gremo≈°anas traucƒìjumi', 'zobu problƒìmas', 'ƒÅdas parazƒ´ti', 'urƒ´nceƒºu infekcijas'],
        ru: ['—Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏—è', '–ø—Ä–æ–±–ª–µ–º—ã —Å –∑—É–±–∞–º–∏', '–∫–æ–∂–Ω—ã–µ –ø–∞—Ä–∞–∑–∏—Ç—ã', '–∏–Ω—Ñ–µ–∫—Ü–∏–∏ –º–æ—á–µ–≤—ã–≤–æ–¥—è—â–∏—Ö –ø—É—Ç–µ–π'],
        en: ['digestive disorders', 'dental problems', 'skin parasites', 'urinary infections']
      },
      avgWeight: { lv: '1-5kg', ru: '1-5–∫–≥', en: '1-5kg' },
      lifespan: { lv: '8-12 gadi', ru: '8-12 –ª–µ—Ç', en: '8-12 years' }
    },
    hamster: {
      name: { lv: 'kƒÅmis', ru: '—Ö–æ–º—è–∫', en: 'hamster' },
      commonIssues: { 
        lv: ['mitrƒÅs astes', 'audzƒìji', 'ƒÅdas problƒìmas', 'zobu problƒìmas'],
        ru: ['–º–æ–∫—Ä—ã–π —Ö–≤–æ—Å—Ç', '–æ–ø—É—Ö–æ–ª–∏', '–ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–∂–µ–π', '–ø—Ä–æ–±–ª–µ–º—ã —Å –∑—É–±–∞–º–∏'],
        en: ['wet tail', 'tumors', 'skin problems', 'dental problems']
      },
      avgWeight: { lv: '0.1-0.2kg', ru: '0.1-0.2–∫–≥', en: '0.1-0.2kg' },
      lifespan: { lv: '2-3 gadi', ru: '2-3 –≥–æ–¥–∞', en: '2-3 years' }
    },
    guinea_pig: {
      name: { lv: 'j≈´ras c≈´ci≈Üa', ru: '–º–æ—Ä—Å–∫–∞—è —Å–≤–∏–Ω–∫–∞', en: 'guinea pig' },
      commonIssues: { 
        lv: ['C vitamƒ´na tr≈´kums', 'elpo≈°anas problƒìmas', 'ƒÅdas problƒìmas', 'zobu problƒìmas'],
        ru: ['–¥–µ—Ñ–∏—Ü–∏—Ç –≤–∏—Ç–∞–º–∏–Ω–∞ C', '–ø—Ä–æ–±–ª–µ–º—ã –¥—ã—Ö–∞–Ω–∏—è', '–ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–∂–µ–π', '–ø—Ä–æ–±–ª–µ–º—ã —Å –∑—É–±–∞–º–∏'],
        en: ['vitamin C deficiency', 'breathing problems', 'skin problems', 'dental problems']
      },
      avgWeight: { lv: '0.7-1.2kg', ru: '0.7-1.2–∫–≥', en: '0.7-1.2kg' },
      lifespan: { lv: '4-8 gadi', ru: '4-8 –ª–µ—Ç', en: '4-8 years' }
    },
    fish: {
      name: { lv: 'zivs', ru: '—Ä—ã–±–∞', en: 'fish' },
      commonIssues: { 
        lv: ['≈´dens kvalitƒÅtes problƒìmas', 'sƒìnƒ´≈°u infekcijas', 'parazƒ´ti', 'uzvedƒ´bas izmai≈Üas'],
        ru: ['–ø—Ä–æ–±–ª–µ–º—ã –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–¥—ã', '–≥—Ä–∏–±–∫–æ–≤—ã–µ –∏–Ω—Ñ–µ–∫—Ü–∏–∏', '–ø–∞—Ä–∞–∑–∏—Ç—ã', '–∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è'],
        en: ['water quality issues', 'fungal infections', 'parasites', 'behavioral changes']
      },
      avgWeight: { lv: '0.001-10kg', ru: '0.001-10–∫–≥', en: '0.001-10kg' },
      lifespan: { lv: '1-20 gadi', ru: '1-20 –ª–µ—Ç', en: '1-20 years' }
    },
    reptile: {
      name: { lv: 'rƒÅpulis', ru: '—Ä–µ–ø—Ç–∏–ª–∏—è', en: 'reptile' },
      commonIssues: { 
        lv: ['temperat≈´ras regulƒÅcijas problƒìmas', 'ƒÅdas nome≈°anas problƒìmas', 'gremo≈°anas traucƒìjumi', 'metaboliskƒÅs slimƒ´bas'],
        ru: ['–ø—Ä–æ–±–ª–µ–º—ã —Ç–µ—Ä–º–æ—Ä–µ–≥—É–ª—è—Ü–∏–∏', '–ø—Ä–æ–±–ª–µ–º—ã –ª–∏–Ω—å–∫–∏', '—Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏—è', '–º–µ—Ç–∞–±–æ–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è'],
        en: ['temperature regulation problems', 'shedding problems', 'digestive disorders', 'metabolic diseases']
      },
      avgWeight: { lv: '0.01-100kg', ru: '0.01-100–∫–≥', en: '0.01-100kg' },
      lifespan: { lv: '5-50 gadi', ru: '5-50 –ª–µ—Ç', en: '5-50 years' }
    }
  };

  return speciesData[species];
};

export const generateVetAdvice = async (query: string, species: PetSpecies): Promise<string> => {
  // Simulate AI processing delay
  await new Promise(resolve => setTimeout(resolve, 1500));
  
  // Detect the language of the user's query
  const detectedLanguage = detectLanguage(query);
  
  // Search knowledge base for relevant information
  const knowledgeResults = vetDatabase.searchKnowledge(query, species);
  
  // Use traditional analysis as fallback
  const symptomAnalysis = analyzeSymptoms(query);
  const treatmentRecommendation = generateTreatmentRecommendations(query, species, symptomAnalysis);
  
  // Get species information in the detected language
  const speciesInfo = getPetSpeciesInfo(species, detectedLanguage);
  
  // Find relevant medicines using the database
  let relevantMedicines = vetDatabase.getEffectiveMedicines(
    knowledgeResults[0]?.conditions[0] || 'general', 
    species
  );
  
  // If no specific medicines found, use suggested medicines from treatment recommendation
  if (relevantMedicines.length === 0) {
    relevantMedicines = treatmentRecommendation.suggestedMedicines
      .map(id => vetDatabase.getAllMedicines().find(m => m.id === id))
      .filter(Boolean) as any[];
  }
  
  // Build response in the detected language
  let response = `${getResponseTemplate('assessment', detectedLanguage)}\n`;
  
  // Use knowledge base results if available, otherwise use traditional analysis
  if (knowledgeResults.length > 0) {
    const knowledge = knowledgeResults[0];
    response += `${knowledge.treatments.join(', ')}\n\n`;
    
    response += `${getResponseTemplate('possibleCauses', detectedLanguage)}\n`;
    knowledge.conditions.forEach((condition, index) => {
      response += `${index + 1}. ${condition}\n`;
    });
  } else {
    response += `${treatmentRecommendation.assessment}\n\n`;
    
    response += `${getResponseTemplate('possibleCauses', detectedLanguage)}\n`;
    treatmentRecommendation.possibleCauses.forEach((cause, index) => {
      response += `${index + 1}. ${cause}\n`;
    });
  }
  response += '\n';
  
  response += `${getResponseTemplate('recommendations', detectedLanguage)}\n`;
  treatmentRecommendation.recommendations.forEach((rec, index) => {
    response += `${index + 1}. ${rec}\n`;
  });
  response += '\n';
  
  if (relevantMedicines.length > 0) {
    response += `${getResponseTemplate('suggestedMedicines', detectedLanguage)}\n`;
    relevantMedicines.slice(0, 3).forEach(medicine => { // Limit to top 3 medicines
      response += `‚Ä¢ **${medicine.name}**: ${medicine.description}\n`;
      if (medicine.dosage[species]) {
        response += `  ${getResponseTemplate('dosage', detectedLanguage)} ${medicine.dosage[species]}\n`;
      }
    });
    response += '\n';
  }
  
  if (treatmentRecommendation.dietaryAdvice.length > 0) {
    response += `${getResponseTemplate('dietaryAdvice', detectedLanguage)}\n`;
    treatmentRecommendation.dietaryAdvice.forEach((diet, index) => {
      response += `${index + 1}. ${diet}\n`;
    });
    response += '\n';
  }
  
  // Add urgency indicator
  const urgencyEmoji = {
    low: 'üü¢',
    medium: 'üü°', 
    high: 'üü†',
    emergency: 'üî¥'
  };
  
  const urgency = knowledgeResults[0]?.urgency || treatmentRecommendation.urgencyLevel;
  response += `${urgencyEmoji[urgency]} ${getResponseTemplate('whenToSeeVet', detectedLanguage)}\n${treatmentRecommendation.whenToSeeVet}\n\n`;
  
  // Add species-specific information
  response += `${getResponseTemplate('petInfo', detectedLanguage)} ${speciesInfo.name[detectedLanguage].toUpperCase()}**\n`;
  response += `‚Ä¢ ${getResponseTemplate('avgWeight', detectedLanguage)} ${speciesInfo.avgWeight[detectedLanguage]}\n`;
  response += `‚Ä¢ ${getResponseTemplate('lifespan', detectedLanguage)} ${speciesInfo.lifespan[detectedLanguage]}\n`;
  response += `‚Ä¢ ${getResponseTemplate('commonIssues', detectedLanguage)} ${speciesInfo.commonIssues[detectedLanguage].join(', ')}\n\n`;
  
  // Add warning in the detected language
  response += getResponseTemplate('warning', detectedLanguage);
  
  // Learn from this query
  vetDatabase.learnFromQuery({
    id: `query-${Date.now()}`,
    query,
    language: detectedLanguage,
    species,
    timestamp: new Date(),
    response
  });
  
  return response;
};